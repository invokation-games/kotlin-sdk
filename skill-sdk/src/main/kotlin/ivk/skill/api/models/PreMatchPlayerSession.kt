/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ivk.skill.api.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param playerId The unique identifier of the player
 * @param isBot Used to flag this session as a Bot session
 * @param partyId Local identifier of the player's party If set, should be unique per party per match Default behavior is to treat each player as their own party, so party_id can be omitted for games that don't support parties.
 * @param perfBeta Override for rating uncertainty (advanced option) Default behavior is to use values generated by model
 * @param priorGamesPlayed The previous number of games the player has played (ever, or just this season).
 * @param priorMmr The MMR of the player at the start of the match. A number between 0 and 1 Default: default_mmr specified in the MMR configuration
 * @param priorMomentum Incoming momentum (**not used in most models**) For models with experimental anti-smurfing features or rating acceleration Essentially rolling-average win rate
 * @param teamId Local identifier of the player's team If set must match one of the teams provided in the [[MatchResult]] Default behavior is to treat each player as their own team, so team_id can be omitted for 1v1 or free-for-all modes.
 */


data class PreMatchPlayerSession (

    /* The unique identifier of the player */
    @Json(name = "player_id")
    val playerId: kotlin.String,

    /* Used to flag this session as a Bot session */
    @Json(name = "is_bot")
    val isBot: kotlin.Boolean? = null,

    /* Local identifier of the player's party If set, should be unique per party per match Default behavior is to treat each player as their own party, so party_id can be omitted for games that don't support parties. */
    @Json(name = "party_id")
    val partyId: kotlin.String? = null,

    /* Override for rating uncertainty (advanced option) Default behavior is to use values generated by model */
    @Json(name = "perf_beta")
    val perfBeta: kotlin.Double? = null,

    /* The previous number of games the player has played (ever, or just this season). */
    @Json(name = "prior_games_played")
    val priorGamesPlayed: kotlin.Long? = null,

    /* The MMR of the player at the start of the match. A number between 0 and 1 Default: default_mmr specified in the MMR configuration */
    @Json(name = "prior_mmr")
    val priorMmr: kotlin.Double? = null,

    /* Incoming momentum (**not used in most models**) For models with experimental anti-smurfing features or rating acceleration Essentially rolling-average win rate */
    @Json(name = "prior_momentum")
    val priorMomentum: kotlin.Double? = null,

    /* Local identifier of the player's team If set must match one of the teams provided in the [[MatchResult]] Default behavior is to treat each player as their own team, so team_id can be omitted for 1v1 or free-for-all modes. */
    @Json(name = "team_id")
    val teamId: kotlin.String? = null

) {


}

