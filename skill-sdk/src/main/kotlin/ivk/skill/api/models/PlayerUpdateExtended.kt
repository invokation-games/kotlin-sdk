/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ivk.skill.api.models

import ivk.skill.api.models.BetaDistribution

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param alpha All the teams the player was a part of during this match Calculated scale factor for uncertainty and step sizes typically = 1.0 outside of placement
 * @param isBot Passthrough from request
 * @param maxTs 
 * @param minTs 
 * @param mmrDelta Change in MMR after this match
 * @param playerExpected Expected individual outcome for the player (0-1) potentially clamped to a maximum value (typically 0.8) to guarantee minimum payoffs
 * @param playerOutcome Actual individual outcome for the player (0-1)
 * @param playerScoreRate Player score per time unit
 * @param playerWeight How much weight individual outcome has to influence MMR
 * @param residual Difference between actual and expected outcomes (prediction error)
 * @param sessionCount Total number of sessions for this player during this match
 * @param teamCount The amount of teams the player was a part of during this match
 * @param teamExpected Weighted average of expected outcomes of all teams this player was a member of
 * @param teamOutcome Weighted average of actual outcomes of all teams this player was a memeber of
 * @param teamWeight How much weight team outcome has to influences MMR
 * @param unifiedExpected Combined team and individual expected outcomes
 * @param unifiedExpectedDist The Beta distribution of expected outcomes Encodes how much certainty we have about the unified expected outcome
 * @param unifiedOutcome Combined team and individual actual outcomes
 */


data class PlayerUpdateExtended (

    /* All the teams the player was a part of during this match Calculated scale factor for uncertainty and step sizes typically = 1.0 outside of placement */
    @Json(name = "alpha")
    val alpha: kotlin.Double,

    /* Passthrough from request */
    @Json(name = "is_bot")
    val isBot: kotlin.Boolean,

    @Json(name = "max_ts")
    val maxTs: kotlin.Double,

    @Json(name = "min_ts")
    val minTs: kotlin.Double,

    /* Change in MMR after this match */
    @Json(name = "mmr_delta")
    val mmrDelta: kotlin.Double,

    /* Expected individual outcome for the player (0-1) potentially clamped to a maximum value (typically 0.8) to guarantee minimum payoffs */
    @Json(name = "player_expected")
    val playerExpected: kotlin.Double,

    /* Actual individual outcome for the player (0-1) */
    @Json(name = "player_outcome")
    val playerOutcome: kotlin.Double,

    /* Player score per time unit */
    @Json(name = "player_score_rate")
    val playerScoreRate: kotlin.Double,

    /* How much weight individual outcome has to influence MMR */
    @Json(name = "player_weight")
    val playerWeight: kotlin.Double,

    /* Difference between actual and expected outcomes (prediction error) */
    @Json(name = "residual")
    val residual: kotlin.Double,

    /* Total number of sessions for this player during this match */
    @Json(name = "session_count")
    val sessionCount: kotlin.Int,

    /* The amount of teams the player was a part of during this match */
    @Json(name = "team_count")
    val teamCount: kotlin.Int,

    /* Weighted average of expected outcomes of all teams this player was a member of */
    @Json(name = "team_expected")
    val teamExpected: kotlin.Double,

    /* Weighted average of actual outcomes of all teams this player was a memeber of */
    @Json(name = "team_outcome")
    val teamOutcome: kotlin.Double,

    /* How much weight team outcome has to influences MMR */
    @Json(name = "team_weight")
    val teamWeight: kotlin.Double,

    /* Combined team and individual expected outcomes */
    @Json(name = "unified_expected")
    val unifiedExpected: kotlin.Double,

    /* The Beta distribution of expected outcomes Encodes how much certainty we have about the unified expected outcome */
    @Json(name = "unified_expected_dist")
    val unifiedExpectedDist: BetaDistribution,

    /* Combined team and individual actual outcomes */
    @Json(name = "unified_outcome")
    val unifiedOutcome: kotlin.Double

) {


}

