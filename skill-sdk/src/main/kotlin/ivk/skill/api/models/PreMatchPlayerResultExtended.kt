/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ivk.skill.api.models

import ivk.skill.api.models.BetaDistribution

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param alpha Calculated scale factor for uncertainty and step sizes Typically = 1.0 outside of placement
 * @param botLevel 
 * @param isBot Passthrough from request
 * @param isFinalPlacement Was this the last match of placement
 * @param mmrDelta Expected change in MMR if match ends as predicted
 * @param placementFrac Fraction of placement completed (max of 1.0, but can be negative)
 * @param playerExpected Expected individual outcome for the player (0-1) Potentially clamped to a maximum value (typically 0.8) to guarantee minimum payoffs
 * @param playerWeight How much weight individual outcome is expected to influence MMR
 * @param teamExpected Expected weighted average of outcomes for all teams this player is a member of
 * @param teamWeight How much weight team outcome is expected to influence MMR
 * @param unifiedExpected Combined team and individual expected outcomes
 * @param unifiedExpectedDist The Beta distribution of expected outcomes Encodes how much certainty we have about the unified expected outcome
 */


data class PreMatchPlayerResultExtended (

    /* Calculated scale factor for uncertainty and step sizes Typically = 1.0 outside of placement */
    @Json(name = "alpha")
    val alpha: kotlin.Double,

    @Json(name = "bot_level")
    val botLevel: kotlin.Double,

    /* Passthrough from request */
    @Json(name = "is_bot")
    val isBot: kotlin.Boolean,

    /* Was this the last match of placement */
    @Json(name = "is_final_placement")
    val isFinalPlacement: kotlin.Boolean,

    /* Expected change in MMR if match ends as predicted */
    @Json(name = "mmr_delta")
    val mmrDelta: kotlin.Double,

    /* Fraction of placement completed (max of 1.0, but can be negative) */
    @Json(name = "placement_frac")
    val placementFrac: kotlin.Double,

    /* Expected individual outcome for the player (0-1) Potentially clamped to a maximum value (typically 0.8) to guarantee minimum payoffs */
    @Json(name = "player_expected")
    val playerExpected: kotlin.Double,

    /* How much weight individual outcome is expected to influence MMR */
    @Json(name = "player_weight")
    val playerWeight: kotlin.Double,

    /* Expected weighted average of outcomes for all teams this player is a member of */
    @Json(name = "team_expected")
    val teamExpected: kotlin.Double,

    /* How much weight team outcome is expected to influence MMR */
    @Json(name = "team_weight")
    val teamWeight: kotlin.Double,

    /* Combined team and individual expected outcomes */
    @Json(name = "unified_expected")
    val unifiedExpected: kotlin.Double,

    /* The Beta distribution of expected outcomes Encodes how much certainty we have about the unified expected outcome */
    @Json(name = "unified_expected_dist")
    val unifiedExpectedDist: BetaDistribution

) {


}

