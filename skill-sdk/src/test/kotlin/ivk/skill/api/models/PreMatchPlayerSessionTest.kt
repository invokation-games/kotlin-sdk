/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ivk.skill.api.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ivk.skill.api.models.PreMatchPlayerSession

class PreMatchPlayerSessionTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of PreMatchPlayerSession
        //val modelInstance = PreMatchPlayerSession()

        // to test the property `playerId` - The unique identifier of the player
        should("test playerId") {
            // uncomment below to test the property
            //modelInstance.playerId shouldBe ("TODO")
        }

        // to test the property `isBot` - Used to flag this session as a Bot session
        should("test isBot") {
            // uncomment below to test the property
            //modelInstance.isBot shouldBe ("TODO")
        }

        // to test the property `partyId` - Local identifier of the player's party If set, should be unique per party per match Default behavior is to treat each player as their own party, so party_id can be omitted for games that don't support parties.
        should("test partyId") {
            // uncomment below to test the property
            //modelInstance.partyId shouldBe ("TODO")
        }

        // to test the property `perfBeta` - Override for rating uncertainty (advanced option) Default behavior is to use values generated by model
        should("test perfBeta") {
            // uncomment below to test the property
            //modelInstance.perfBeta shouldBe ("TODO")
        }

        // to test the property `priorGamesPlayed` - The previous number of games the player has played (ever, or just this season).
        should("test priorGamesPlayed") {
            // uncomment below to test the property
            //modelInstance.priorGamesPlayed shouldBe ("TODO")
        }

        // to test the property `priorMmr` - The MMR of the player at the start of the match. A number between 0 and 1 Default: default_mmr specified in the MMR configuration
        should("test priorMmr") {
            // uncomment below to test the property
            //modelInstance.priorMmr shouldBe ("TODO")
        }

        // to test the property `priorMomentum` - Incoming momentum (**not used in most models**) For models with experimental anti-smurfing features or rating acceleration Essentially rolling-average win rate
        should("test priorMomentum") {
            // uncomment below to test the property
            //modelInstance.priorMomentum shouldBe ("TODO")
        }

        // to test the property `teamId` - Local identifier of the player's team If set must match one of the teams provided in the [[MatchResult]] Default behavior is to treat each player as their own team, so team_id can be omitted for 1v1 or free-for-all modes.
        should("test teamId") {
            // uncomment below to test the property
            //modelInstance.teamId shouldBe ("TODO")
        }

    }
}
