/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ivk.skill.api.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ivk.skill.api.models.PreMatchPlayerResultExtended
import ivk.skill.api.models.BetaDistribution

class PreMatchPlayerResultExtendedTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of PreMatchPlayerResultExtended
        //val modelInstance = PreMatchPlayerResultExtended()

        // to test the property `alpha` - Calculated scale factor for uncertainty and step sizes Typically = 1.0 outside of placement
        should("test alpha") {
            // uncomment below to test the property
            //modelInstance.alpha shouldBe ("TODO")
        }

        // to test the property `isBot` - Passthrough from request
        should("test isBot") {
            // uncomment below to test the property
            //modelInstance.isBot shouldBe ("TODO")
        }

        // to test the property `mmrDelta` - Expected change in MMR if match ends as predicted
        should("test mmrDelta") {
            // uncomment below to test the property
            //modelInstance.mmrDelta shouldBe ("TODO")
        }

        // to test the property `playerExpected` - Expected individual outcome for the player (0-1) Potentially clamped to a maximum value (typically 0.8) to guarantee minimum payoffs
        should("test playerExpected") {
            // uncomment below to test the property
            //modelInstance.playerExpected shouldBe ("TODO")
        }

        // to test the property `playerWeight` - How much weight individual outcome is expected to influence MMR
        should("test playerWeight") {
            // uncomment below to test the property
            //modelInstance.playerWeight shouldBe ("TODO")
        }

        // to test the property `teamExpected` - Expected weighted average of outcomes for all teams this player is a member of
        should("test teamExpected") {
            // uncomment below to test the property
            //modelInstance.teamExpected shouldBe ("TODO")
        }

        // to test the property `teamWeight` - How much weight team outcome is expected to influence MMR
        should("test teamWeight") {
            // uncomment below to test the property
            //modelInstance.teamWeight shouldBe ("TODO")
        }

        // to test the property `unifiedExpected` - Combined team and individual expected outcomes
        should("test unifiedExpected") {
            // uncomment below to test the property
            //modelInstance.unifiedExpected shouldBe ("TODO")
        }

        // to test the property `unifiedExpectedDist` - The Beta distribution of expected outcomes Encodes how much certainty we have about the unified expected outcome
        should("test unifiedExpectedDist") {
            // uncomment below to test the property
            //modelInstance.unifiedExpectedDist shouldBe ("TODO")
        }

    }
}
