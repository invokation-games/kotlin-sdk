/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ivk.skill.api.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ivk.skill.api.models.TeamResult

class TeamResultTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of TeamResult
        //val modelInstance = TeamResult()

        // to test the property `beta` - Total uncertainty in team outcome
        should("test beta") {
            // uncomment below to test the property
            //modelInstance.beta shouldBe ("TODO")
        }

        // to test the property `density` - The weighted team size
        should("test density") {
            // uncomment below to test the property
            //modelInstance.density shouldBe ("TODO")
        }

        // to test the property `expected` - the expected team outcome based on party and team model (0-1) potentially clamped to a maximum value (typically 0.8) to guarantee minimum payoffs
        should("test expected") {
            // uncomment below to test the property
            //modelInstance.expected shouldBe ("TODO")
        }

        // to test the property `id` - The local identifier of the team (passthrough)
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `idx` - Zero-indexed team index
        should("test idx") {
            // uncomment below to test the property
            //modelInstance.idx shouldBe ("TODO")
        }

        // to test the property `mmr` - Total MMR of the team as determined by the party and team models (not necessarily the sum of MMRs)
        should("test mmr") {
            // uncomment below to test the property
            //modelInstance.mmr shouldBe ("TODO")
        }

        // to test the property `outcome` - the team outcome (0-1) regardless of individual performance
        should("test outcome") {
            // uncomment below to test the property
            //modelInstance.outcome shouldBe ("TODO")
        }

        // to test the property `partyCount` - Total parties in the team
        should("test partyCount") {
            // uncomment below to test the property
            //modelInstance.partyCount shouldBe ("TODO")
        }

        // to test the property `propertySize` - Total player count the team has seen throughout the match
        should("test propertySize") {
            // uncomment below to test the property
            //modelInstance.propertySize shouldBe ("TODO")
        }

        // to test the property `score` - Score of the team (passthrough)
        should("test score") {
            // uncomment below to test the property
            //modelInstance.score shouldBe ("TODO")
        }

    }
}
